{"version":3,"sources":["components/ContactsList/ContactsList.module.css","App.module.css","components/Container/Container.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/Filter/Filter.module.css"],"names":["module","exports","Container","children","className","s","container","Propypes","PropTypes","node","ContactForm","state","name","number","hendleChange","event","currentTarget","value","setState","hendleSubmit","preventDefault","props","onFormSubmit","id","shortid","generate","reset","contactForm","onSubmit","this","formLabel","formInput","type","pattern","title","required","onChange","formButton","Component","ContactList","contacts","onDeleteContact","contactsWrapper","map","contactButton","onClick","Filter","filterWrapper","filterLabel","filterInput","App","filter","hendleFormSbumit","data","banToAdd","alert","changeFilter","e","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","searchName","find","deleteContact","contactId","prevState","localStorage","getItem","parsedContacts","JSON","parse","prevProps","nextContacts","setItem","stringify","visibleContacts","appTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32b863e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsWrapper\":\"ContactsList_contactsWrapper__2s-EG\",\"contactButton\":\"ContactsList_contactButton__2a11v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appTitle\":\"App_appTitle__45Jan\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1uu7L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__33Jg1\",\"formLabel\":\"ContactForm_formLabel__2Hz-c\",\"formInput\":\"ContactForm_formInput__1Vac8\",\"formButton\":\"ContactForm_formButton__35iBf\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Container.module.css\";\r\n\r\nfunction Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n\r\nContainer.Propypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Container;","import React, { Component } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from \"shortid\";\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: \"\", number: \"\" };\r\n  //записывает в this.state значения поля формы\r\n  hendleChange = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n  //передает в Аpp значения полей формы\r\n  hendleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.onFormSubmit({ name, number, id: shortid.generate() });\r\n    this.reset();\r\n  };\r\n  //очистка формы\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <form className={s.contactForm} onSubmit={this.hendleSubmit}>\r\n        <label className={s.formLabel}>\r\n          Name\r\n          <input\r\n            className={s.formInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.hendleChange}\r\n          />\r\n        </label>\r\n        <label className={s.formLabel}>\r\n          <span>Number</span>\r\n          <input\r\n            className={s.formInput}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.hendleChange}\r\n          />\r\n        </label>\r\n\r\n        <button className={s.formButton} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = { onFormSubmit: PropTypes.func.isRequired };\r\n\r\nexport default ContactForm;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport shortid from \"shortid\";\r\nimport s from \"./ContactsList.module.css\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <div className={s.contactsWrapper}>\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={shortid.generate()}>\r\n          <span>{name}: </span>\r\n          <span>{number}</span>\r\n          <button\r\n            className={s.contactButton}\r\n            type=\"button\"\r\n            onClick={() => onDeleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div className={s.filterWrapper}>\r\n    <label className={s.filterLabel}>\r\n      Find contacts by name\r\n      <input\r\n        className={s.filterInput}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Container from \"./components/Container/Container\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactsList/ContactsList\";\nimport Filter from \"./components/Filter/Filter\";\nimport s from \"./App.module.css\";\n\n\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n  // значение из localStorage и записывается в state\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  //если обновился state, записывается значение в localStorage\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n    }\n  }\n\n  //принимает state из ContactForm, делает проверку и записывает его в state App\n  hendleFormSbumit = (data) => {\n    const { name, number, id } = data;\n    if (this.banToAdd(data.name)) {\n      alert(`${data.name} is alreadi in contacts`);\n      return;\n    }\n    this.setState({\n      contacts: [...this.state.contacts, { name, number, id }],\n    });\n  };\n  //записывает значение в this.state.filter \n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n  //фильтрует this.state.contacts\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  //находит одинаковые имена в this.state.contacts\n  banToAdd = (searchName) => {\n    return this.state.contacts.find(({ name }) => name === searchName);\n  };\n  //удаляет выбранный контакт\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n  render() {\n    const { filter, contacts, id } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <Container>\n        <h1 className={s.appTitle}>Phonebook</h1>\n        <ContactForm\n          onFormSubmit={this.hendleFormSbumit}\n          contacts={contacts}\n          id={id}\n        />\n\n        <h2 className={s.appTitle}>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"Filter_filterWrapper__iOMTR\",\"filterLabel\":\"Filter_filterLabel__2_uHH\",\"filterInput\":\"Filter_filterInput__4W2dI\"};"],"sourceRoot":""}